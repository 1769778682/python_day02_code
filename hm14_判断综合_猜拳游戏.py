# 游戏规则:石头(1) / 剪刀(2) / 布(3)
# 胜利规则: 石头1-> 剪刀2 / 剪刀2 -> 布3 / 布3 -> 石头1
# 需求:
# 1. 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）
# 2. 电脑 随机 出拳 —— 先假定电脑只会出石头，完成整体代码功能
# 3. 比较胜负
import random  # 导包代码之前不能有可执行代码, 一般都要放在代码文件的最开始位置

# 1. 从控制台输入要出的拳 —— 石头（1）／剪刀（2）／布（3）
# input() 函数获取的数据均为字符串类型, 想要比较, 需要类型转换
player = int(input('请出拳 石头（1）／剪刀（2）／布（3） :'))
# 2. 电脑 随机 出拳 —— 先假定电脑只会出石头，完成整体代码功能
# computer = 1
computer = random.randint(1, 3)  # 更换为随机出拳
# 3. 比较胜负
# 需求分析:
# 游戏结果无非三种情况: 玩家胜/ 电脑胜/ 平局
# 首先将玩家获胜的条件写完, 再考虑平局的条件, 剩下就都是电脑获胜结果
# 玩家获胜条件: 石头1-> 剪刀2 / 剪刀2 -> 布3 / 布3 -> 石头1
# 可以通过小括号限制逻辑运算优先级

# 注意: Python 代码规范要求:
# 单行代码总长度不应该超过80个字符(在小屏幕电脑上, 代码可阅读性降低), 可以通过适当换行来解决

# 直接换行方案虽然可行, 但是Python代码规范不建议
# if (player == 1 and computer == 2) or\
#         (player == 2 and computer == 3) or\
#         (player == 3 and computer == 1):

# 解决方案: 将超长代码使用小括号括起来, 再进行换行操作即可(推荐方案)
if ((player == 1 and computer == 2) or
        (player == 2 and computer == 3) or
        (player == 3 and computer == 1)):
    print('奥利给!电脑你弱爆了!')  # 玩家获胜
elif player == computer:
    print('想到一块了, 再来一盘!')  # 平局
else:
    print('不行, 我要和你决战到天明!')  # 电脑获胜

# 思考题: 现在的代码执行时, 我们并不知道到电脑出的是什么拳, 该如何完善? (考虑判断)
